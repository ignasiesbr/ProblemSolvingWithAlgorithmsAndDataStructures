# Improve quick sort using partition limit.
import random
import timeit


from QuickSort import quickSort
from InsertionSort import insertionSort

def sort(l):
    limit = 30
    if len(l) < 30:
        insertionSort(l)
    else:
        quickSort(l)

l = [random.randint(1,1000) for i in range(1000)]

# Benchmark to find a good limit partition.
tQuick = timeit.Timer("quickSort(l)" , "from __main__ import l, quickSort")
tInsert = timeit.Timer("insertionSort(g)", "from __main__ import g, insertionSort")

resQuick = []
resInsert = []
for i in range(10,300, 10):
    l = [random.randint(1,1000) for x in range(i)]
    g = l.copy()
    rQuick = tQuick.timeit(number=1)
    resQuick.append(rQuick)
    rInsert = tInsert.timeit(number=1)
    resInsert.append(rInsert)

print("Results using quickSort " + str(resQuick))
print("Results using insertionSort " + str(resInsert))

# Results obtained:
# Results using quickSort
# [2.736199999997524e-05, 4.3593999999869126e-05, 7.281199999997767e-05, 0.00010666600000019955,
# 0.00012614500000007745, 0.00019246299999986505, 0.0001855070000000847, 0.00022400000000000198, 0.00025739100000010673,
# 0.00029124599999996725, 0.0003297390000001066, 0.0003886379999999967, 0.000427130999999914, 0.0004489270000000989,
# 0.00046423199999989784, 0.0004957680000001741, 0.0006441729999999701, 0.00059501499999981, 0.000640462999999869,
# 0.0006900869999999504, 0.0007332170000000637, 0.0007350719999998923, 0.000819942000000129, 0.0008222599999998526,
# 0.0009646370000000459, 0.0009572170000000657, 0.0009470139999998572, 0.0009864339999998695, 0.0010550710000001295]

# Results using insertionSort
# [1.4377000000065365e-05, 2.92179999998865e-05, 7.74489999999517e-05, 0.0001349569999999911,
# 0.00019385500000002054, 0.0003510719999999523, 0.0004211009999999238, 0.0005347239999999864, 0.0007777390000001105,
# 0.0008806949999999869, 0.0010828979999999433, 0.001260520999999848, 0.0014951869999999534, 0.0017655639999998307,
# 0.0018179700000000576, 0.0020790710000000434, 0.0026295640000000287, 0.002707940999999936, 0.0030631869999999672,
# 0.00360069399999996, 0.0035622010000000426, 0.004251360000000037, 0.0045699690000000626, 0.005154316000000048,
# 0.005411706999999932, 0.00600161999999993, 0.006137504000000016, 0.006752460999999821, 0.0079730979999999]

# The previous results are from 10 to 300 from 10 to 10.
# We can see that a good limit partition will be around 30.